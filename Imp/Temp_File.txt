
TUT Number : TUT
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    IF CHARGEOFF.DATE THEN
        PROCESS.TYPES = "BANK":@FM:"CUST"
    END
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    IF CURRENT.ACTIVITY EQ 'MAKEDUE.DISBURSE' THEN
        VALID.BILL.TYPES = 'DISBURSEMENT'
    END
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = "UNAUTH"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE SYS.BILL.TYPE EQ "EXPECTED"
                            PAY.METHOD = 'DUE'
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = EXP.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = ""
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                    IF DR.EVENT.TYPE THEN
                        EVENT.REC<AC.SoftAccounting.E_eventType> = DR.EVENT.TYPE
                        EVENT.REC<AC.SoftAccounting.E_amount> = PROPERTY.AMOUNT
                        IF PART.ID EQ "BOOK" THEN
                            EVENT.REC<AC.SoftAccounting.E_sign> = "DEBIT"
                        END
                        EVENT.REC<AC.SoftAccounting.E_balanceType> = DEBIT.BALANCE.TYPE
                        EVENT.REC<AC.SoftAccounting.E_valueDate> = EVENT.DATE
                        EVENT.REC<AC.SoftAccounting.E_reversalInd> = (REVERSAL.MODE = "YES")
                        EVENT.REC<AC.SoftAccounting.E_contractBalId> = PART.ECB
                        IF CREDIT.BALANCE.TYPE THEN
                            EVENT.REC<AC.SoftAccounting.E_contraTarget> = "BAL*":CREDIT.BALANCE.TYPE
                        END
                        MULTI.EVENT.REC<-1> = LOWER(EVENT.REC)
                        EVENT.REC = ""
                    END
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                IF REQD.PROCESS EQ "VAL" THEN
                    IF MULTI.EVENT.REC THEN
                        AA.Accounting.AccountingManager(REQD.PROCESS, PROPERTY, ACTIVITY.ACTION, "", MULTI.EVENT.REC, RET.ERROR)
                    END
                END
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
            END
    END CASE
    REPEAT
    IF RET.ERROR AND NOT(PROCESS.ERROR) THEN
        PROCESS.ERROR<-1> = RET.ERROR
        EB.SystemTables.setEtext(RET.ERROR)
        EB.ErrorProcessing.StoreEndError()
    END
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    IF REQD.PROCESS = "VAL" THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "BILL.REFERENCE.PICKED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = BILL.REFERENCE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.AMOUNT"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROPERTY.AMOUNT
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "EVENT.DATE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = EVENT.DATE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "CREDIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = CREDIT.BALANCE.TYPE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "DEBIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = DEBIT.BALANCE.TYPE
    END
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    IF PROCESS.ERROR THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ERROR DETECTED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROCESS.ERROR
    END
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    IF CHARGEOFF.DATE THEN
        PROCESS.TYPES = "BANK":@FM:"CUST"
    END
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    IF CURRENT.ACTIVITY EQ 'MAKEDUE.DISBURSE' THEN
        VALID.BILL.TYPES = 'DISBURSEMENT'
    END
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = "UNAUTH"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE SYS.BILL.TYPE EQ "EXPECTED"
                            PAY.METHOD = 'DUE'
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = EXP.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = ""
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                    IF DR.EVENT.TYPE THEN
                        EVENT.REC<AC.SoftAccounting.E_eventType> = DR.EVENT.TYPE
                        EVENT.REC<AC.SoftAccounting.E_amount> = PROPERTY.AMOUNT
                        IF PART.ID EQ "BOOK" THEN
                            EVENT.REC<AC.SoftAccounting.E_sign> = "DEBIT"
                        END
                        EVENT.REC<AC.SoftAccounting.E_balanceType> = DEBIT.BALANCE.TYPE
                        EVENT.REC<AC.SoftAccounting.E_valueDate> = EVENT.DATE
                        EVENT.REC<AC.SoftAccounting.E_reversalInd> = (REVERSAL.MODE = "YES")
                        EVENT.REC<AC.SoftAccounting.E_contractBalId> = PART.ECB
                        IF CREDIT.BALANCE.TYPE THEN
                            EVENT.REC<AC.SoftAccounting.E_contraTarget> = "BAL*":CREDIT.BALANCE.TYPE
                        END
                        MULTI.EVENT.REC<-1> = LOWER(EVENT.REC)
                        EVENT.REC = ""
                    END
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                ELSE
                    NOT(REQD.PROCESS EQ "VAL")
                    AA.Accounting.AccountingManager(REQD.PROCESS, "", "", "", "", RET.ERROR)
                END
            END
    END CASE
    REPEAT
    IF RET.ERROR AND NOT(PROCESS.ERROR) THEN
        PROCESS.ERROR<-1> = RET.ERROR
        EB.SystemTables.setEtext(RET.ERROR)
        EB.ErrorProcessing.StoreEndError()
    END
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    IF REQD.PROCESS = "VAL" THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "BILL.REFERENCE.PICKED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = BILL.REFERENCE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.AMOUNT"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROPERTY.AMOUNT
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "EVENT.DATE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = EVENT.DATE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "CREDIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = CREDIT.BALANCE.TYPE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "DEBIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = DEBIT.BALANCE.TYPE
    END
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    IF PROCESS.ERROR THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ERROR DETECTED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROCESS.ERROR
    END
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    IF CHARGEOFF.DATE THEN
        PROCESS.TYPES = "BANK":@FM:"CUST"
    END
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    IF CURRENT.ACTIVITY EQ 'MAKEDUE.DISBURSE' THEN
        VALID.BILL.TYPES = 'DISBURSEMENT'
    END
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = "UNAUTH"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE SYS.BILL.TYPE EQ "EXPECTED"
                            PAY.METHOD = 'DUE'
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = EXP.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = ""
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                    IF DR.EVENT.TYPE THEN
                        EVENT.REC<AC.SoftAccounting.E_eventType> = DR.EVENT.TYPE
                        EVENT.REC<AC.SoftAccounting.E_amount> = PROPERTY.AMOUNT
                        ELSE
                            NOT(PART.ID EQ "BOOK")
                            EVENT.REC<AC.SoftAccounting.E_sign> = "CREDIT"
                        END
                        EVENT.REC<AC.SoftAccounting.E_balanceType> = DEBIT.BALANCE.TYPE
                        EVENT.REC<AC.SoftAccounting.E_valueDate> = EVENT.DATE
                        EVENT.REC<AC.SoftAccounting.E_reversalInd> = (REVERSAL.MODE = "YES")
                        EVENT.REC<AC.SoftAccounting.E_contractBalId> = PART.ECB
                        MULTI.EVENT.REC<-1> = LOWER(EVENT.REC)
                        EVENT.REC = ""
                    END
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                IF REQD.PROCESS EQ "VAL" THEN
                    IF MULTI.EVENT.REC THEN
                        AA.Accounting.AccountingManager(REQD.PROCESS, PROPERTY, ACTIVITY.ACTION, "", MULTI.EVENT.REC, RET.ERROR)
                    END
                END
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
            END
    END CASE
    REPEAT
    IF RET.ERROR AND NOT(PROCESS.ERROR) THEN
        PROCESS.ERROR<-1> = RET.ERROR
        EB.SystemTables.setEtext(RET.ERROR)
        EB.ErrorProcessing.StoreEndError()
    END
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    IF REQD.PROCESS = "VAL" THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "BILL.REFERENCE.PICKED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = BILL.REFERENCE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.AMOUNT"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROPERTY.AMOUNT
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "EVENT.DATE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = EVENT.DATE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "CREDIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = CREDIT.BALANCE.TYPE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "DEBIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = DEBIT.BALANCE.TYPE
    END
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    IF PROCESS.ERROR THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ERROR DETECTED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROCESS.ERROR
    END
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    IF CHARGEOFF.DATE THEN
        PROCESS.TYPES = "BANK":@FM:"CUST"
    END
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    IF CURRENT.ACTIVITY EQ 'MAKEDUE.DISBURSE' THEN
        VALID.BILL.TYPES = 'DISBURSEMENT'
    END
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = "UNAUTH"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE SYS.BILL.TYPE EQ "EXPECTED"
                            PAY.METHOD = 'DUE'
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = EXP.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = ""
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                    IF DR.EVENT.TYPE THEN
                        EVENT.REC<AC.SoftAccounting.E_eventType> = DR.EVENT.TYPE
                        EVENT.REC<AC.SoftAccounting.E_amount> = PROPERTY.AMOUNT
                        ELSE
                            NOT(PART.ID EQ "BOOK")
                            EVENT.REC<AC.SoftAccounting.E_sign> = "CREDIT"
                        END
                        EVENT.REC<AC.SoftAccounting.E_balanceType> = DEBIT.BALANCE.TYPE
                        EVENT.REC<AC.SoftAccounting.E_valueDate> = EVENT.DATE
                        EVENT.REC<AC.SoftAccounting.E_reversalInd> = (REVERSAL.MODE = "YES")
                        EVENT.REC<AC.SoftAccounting.E_contractBalId> = PART.ECB
                        MULTI.EVENT.REC<-1> = LOWER(EVENT.REC)
                        EVENT.REC = ""
                    END
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                ELSE
                    NOT(REQD.PROCESS EQ "VAL")
                    AA.Accounting.AccountingManager(REQD.PROCESS, "", "", "", "", RET.ERROR)
                END
            END
    END CASE
    REPEAT
    IF RET.ERROR AND NOT(PROCESS.ERROR) THEN
        PROCESS.ERROR<-1> = RET.ERROR
        EB.SystemTables.setEtext(RET.ERROR)
        EB.ErrorProcessing.StoreEndError()
    END
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    IF REQD.PROCESS = "VAL" THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "BILL.REFERENCE.PICKED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = BILL.REFERENCE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.AMOUNT"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROPERTY.AMOUNT
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "EVENT.DATE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = EVENT.DATE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "CREDIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = CREDIT.BALANCE.TYPE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "DEBIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = DEBIT.BALANCE.TYPE
    END
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    IF PROCESS.ERROR THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ERROR DETECTED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROCESS.ERROR
    END
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = 'REVERSE'
            REVERSAL.MODE = "YES"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE SYS.BILL.TYPE EQ "EXPECTED"
                            PAY.METHOD = 'DUE'
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = EXP.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = ""
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                    IF DR.EVENT.TYPE THEN
                        EVENT.REC<AC.SoftAccounting.E_eventType> = DR.EVENT.TYPE
                        EVENT.REC<AC.SoftAccounting.E_amount> = PROPERTY.AMOUNT
                        IF PART.ID EQ "BOOK" THEN
                            EVENT.REC<AC.SoftAccounting.E_sign> = "DEBIT"
                        END
                        EVENT.REC<AC.SoftAccounting.E_balanceType> = DEBIT.BALANCE.TYPE
                        EVENT.REC<AC.SoftAccounting.E_valueDate> = EVENT.DATE
                        EVENT.REC<AC.SoftAccounting.E_reversalInd> = (REVERSAL.MODE = "YES")
                        EVENT.REC<AC.SoftAccounting.E_contractBalId> = PART.ECB
                        IF CREDIT.BALANCE.TYPE THEN
                            EVENT.REC<AC.SoftAccounting.E_contraTarget> = "BAL*":CREDIT.BALANCE.TYPE
                        END
                        MULTI.EVENT.REC<-1> = LOWER(EVENT.REC)
                        EVENT.REC = ""
                    END
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                IF REQD.PROCESS EQ "VAL" THEN
                    IF MULTI.EVENT.REC THEN
                        AA.Accounting.AccountingManager(REQD.PROCESS, PROPERTY, ACTIVITY.ACTION, "", MULTI.EVENT.REC, RET.ERROR)
                    END
                END
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
            END
    END CASE
    REPEAT
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = 'REVERSE'
            REVERSAL.MODE = "YES"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE SYS.BILL.TYPE EQ "EXPECTED"
                            PAY.METHOD = 'DUE'
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = EXP.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = ""
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                    IF DR.EVENT.TYPE THEN
                        EVENT.REC<AC.SoftAccounting.E_eventType> = DR.EVENT.TYPE
                        EVENT.REC<AC.SoftAccounting.E_amount> = PROPERTY.AMOUNT
                        IF PART.ID EQ "BOOK" THEN
                            EVENT.REC<AC.SoftAccounting.E_sign> = "DEBIT"
                        END
                        EVENT.REC<AC.SoftAccounting.E_balanceType> = DEBIT.BALANCE.TYPE
                        EVENT.REC<AC.SoftAccounting.E_valueDate> = EVENT.DATE
                        EVENT.REC<AC.SoftAccounting.E_reversalInd> = (REVERSAL.MODE = "YES")
                        EVENT.REC<AC.SoftAccounting.E_contractBalId> = PART.ECB
                        IF CREDIT.BALANCE.TYPE THEN
                            EVENT.REC<AC.SoftAccounting.E_contraTarget> = "BAL*":CREDIT.BALANCE.TYPE
                        END
                        MULTI.EVENT.REC<-1> = LOWER(EVENT.REC)
                        EVENT.REC = ""
                    END
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                ELSE
                    NOT(REQD.PROCESS EQ "VAL")
                    AA.Accounting.AccountingManager(REQD.PROCESS, "", "", "", "", RET.ERROR)
                END
            END
    END CASE
    REPEAT
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = 'REVERSE'
            REVERSAL.MODE = "YES"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE SYS.BILL.TYPE EQ "EXPECTED"
                            PAY.METHOD = 'DUE'
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = EXP.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = ""
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                    IF DR.EVENT.TYPE THEN
                        EVENT.REC<AC.SoftAccounting.E_eventType> = DR.EVENT.TYPE
                        EVENT.REC<AC.SoftAccounting.E_amount> = PROPERTY.AMOUNT
                        ELSE
                            NOT(PART.ID EQ "BOOK")
                            EVENT.REC<AC.SoftAccounting.E_sign> = "CREDIT"
                        END
                        EVENT.REC<AC.SoftAccounting.E_balanceType> = DEBIT.BALANCE.TYPE
                        EVENT.REC<AC.SoftAccounting.E_valueDate> = EVENT.DATE
                        EVENT.REC<AC.SoftAccounting.E_reversalInd> = (REVERSAL.MODE = "YES")
                        EVENT.REC<AC.SoftAccounting.E_contractBalId> = PART.ECB
                        MULTI.EVENT.REC<-1> = LOWER(EVENT.REC)
                        EVENT.REC = ""
                    END
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                IF REQD.PROCESS EQ "VAL" THEN
                    IF MULTI.EVENT.REC THEN
                        AA.Accounting.AccountingManager(REQD.PROCESS, PROPERTY, ACTIVITY.ACTION, "", MULTI.EVENT.REC, RET.ERROR)
                    END
                END
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
            END
    END CASE
    REPEAT
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = 'REVERSE'
            REVERSAL.MODE = "YES"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE SYS.BILL.TYPE EQ "EXPECTED"
                            PAY.METHOD = 'DUE'
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = EXP.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = ""
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                    IF DR.EVENT.TYPE THEN
                        EVENT.REC<AC.SoftAccounting.E_eventType> = DR.EVENT.TYPE
                        EVENT.REC<AC.SoftAccounting.E_amount> = PROPERTY.AMOUNT
                        ELSE
                            NOT(PART.ID EQ "BOOK")
                            EVENT.REC<AC.SoftAccounting.E_sign> = "CREDIT"
                        END
                        EVENT.REC<AC.SoftAccounting.E_balanceType> = DEBIT.BALANCE.TYPE
                        EVENT.REC<AC.SoftAccounting.E_valueDate> = EVENT.DATE
                        EVENT.REC<AC.SoftAccounting.E_reversalInd> = (REVERSAL.MODE = "YES")
                        EVENT.REC<AC.SoftAccounting.E_contractBalId> = PART.ECB
                        MULTI.EVENT.REC<-1> = LOWER(EVENT.REC)
                        EVENT.REC = ""
                    END
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                ELSE
                    NOT(REQD.PROCESS EQ "VAL")
                    AA.Accounting.AccountingManager(REQD.PROCESS, "", "", "", "", RET.ERROR)
                END
            END
    END CASE
    REPEAT
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    ELSE
        NOT(CHARGEOFF.DATE)
        PROCESS.TYPES = "BANK"
    END
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    ELSE
        NOT(CURRENT.ACTIVITY EQ 'MAKEDUE.DISBURSE')
        VALID.BILL.TYPES = 'PAYMENT':@VM:'EXPECTED':@VM:'TRANCHE'
    END
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = 'DELETE'
            REQD.PROCESS = "DEL"
            IF REQD.PROCESS EQ "VAL" THEN
                IF MULTI.EVENT.REC THEN
                    AA.Accounting.AccountingManager(REQD.PROCESS, PROPERTY, ACTIVITY.ACTION, "", MULTI.EVENT.REC, RET.ERROR)
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
    END CASE
    REPEAT
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    ELSE
        NOT(CHARGEOFF.DATE)
        PROCESS.TYPES = "BANK"
    END
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    ELSE
        NOT(CURRENT.ACTIVITY EQ 'MAKEDUE.DISBURSE')
        VALID.BILL.TYPES = 'PAYMENT':@VM:'EXPECTED':@VM:'TRANCHE'
    END
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = 'DELETE'
            REQD.PROCESS = "DEL"
            ELSE
                NOT(REQD.PROCESS EQ "VAL")
                AA.Accounting.AccountingManager(REQD.PROCESS, "", "", "", "", RET.ERROR)
            END
    END CASE
    REPEAT
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = 'AUTH'
            REQD.PROCESS = "AUT"
            IF REQD.PROCESS EQ "VAL" THEN
                IF MULTI.EVENT.REC THEN
                    AA.Accounting.AccountingManager(REQD.PROCESS, PROPERTY, ACTIVITY.ACTION, "", MULTI.EVENT.REC, RET.ERROR)
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
    END CASE
    REPEAT
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = 'AUTH'
            REQD.PROCESS = "AUT"
            ELSE
                NOT(REQD.PROCESS EQ "VAL")
                AA.Accounting.AccountingManager(REQD.PROCESS, "", "", "", "", RET.ERROR)
            END
    END CASE
    REPEAT
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    IF CHARGEOFF.DATE THEN
        PROCESS.TYPES = "BANK":@FM:"CUST"
    END
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    IF CURRENT.ACTIVITY EQ 'MAKEDUE.DISBURSE' THEN
        VALID.BILL.TYPES = 'DISBURSEMENT'
    END
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = "UNAUTH"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE SYS.BILL.TYPE MATCHES "DISBURSEMENT":@VM:"TRANCHE"
                            PAY.METHOD = 'PAY'
                            ADDITIONAL.INFO = 'AVL'
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = AVL.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = ''
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                IF REQD.PROCESS EQ "VAL" THEN
                    IF MULTI.EVENT.REC THEN
                        AA.Accounting.AccountingManager(REQD.PROCESS, PROPERTY, ACTIVITY.ACTION, "", MULTI.EVENT.REC, RET.ERROR)
                    END
                END
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
            END
    END CASE
    REPEAT
    IF RET.ERROR AND NOT(PROCESS.ERROR) THEN
        PROCESS.ERROR<-1> = RET.ERROR
        EB.SystemTables.setEtext(RET.ERROR)
        EB.ErrorProcessing.StoreEndError()
    END
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    IF REQD.PROCESS = "VAL" THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "BILL.REFERENCE.PICKED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = BILL.REFERENCE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.AMOUNT"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROPERTY.AMOUNT
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "EVENT.DATE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = EVENT.DATE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "CREDIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = CREDIT.BALANCE.TYPE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "DEBIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = DEBIT.BALANCE.TYPE
    END
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    IF PROCESS.ERROR THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ERROR DETECTED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROCESS.ERROR
    END
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    IF CHARGEOFF.DATE THEN
        PROCESS.TYPES = "BANK":@FM:"CUST"
    END
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    IF CURRENT.ACTIVITY EQ 'MAKEDUE.DISBURSE' THEN
        VALID.BILL.TYPES = 'DISBURSEMENT'
    END
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = "UNAUTH"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE SYS.BILL.TYPE MATCHES "DISBURSEMENT":@VM:"TRANCHE"
                            PAY.METHOD = 'PAY'
                            ADDITIONAL.INFO = 'AVL'
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = AVL.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = ''
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                ELSE
                    NOT(REQD.PROCESS EQ "VAL")
                    AA.Accounting.AccountingManager(REQD.PROCESS, "", "", "", "", RET.ERROR)
                END
            END
    END CASE
    REPEAT
    IF RET.ERROR AND NOT(PROCESS.ERROR) THEN
        PROCESS.ERROR<-1> = RET.ERROR
        EB.SystemTables.setEtext(RET.ERROR)
        EB.ErrorProcessing.StoreEndError()
    END
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    IF REQD.PROCESS = "VAL" THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "BILL.REFERENCE.PICKED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = BILL.REFERENCE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.AMOUNT"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROPERTY.AMOUNT
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "EVENT.DATE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = EVENT.DATE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "CREDIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = CREDIT.BALANCE.TYPE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "DEBIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = DEBIT.BALANCE.TYPE
    END
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    IF PROCESS.ERROR THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ERROR DETECTED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROCESS.ERROR
    END
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    IF CHARGEOFF.DATE THEN
        PROCESS.TYPES = "BANK":@FM:"CUST"
    END
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    IF CURRENT.ACTIVITY EQ 'MAKEDUE.DISBURSE' THEN
        VALID.BILL.TYPES = 'DISBURSEMENT'
    END
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = "UNAUTH"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> EQ "DUE"
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = DUE.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = CUR.BALANCE.TYPE
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                IF REQD.PROCESS EQ "VAL" THEN
                    IF MULTI.EVENT.REC THEN
                        AA.Accounting.AccountingManager(REQD.PROCESS, PROPERTY, ACTIVITY.ACTION, "", MULTI.EVENT.REC, RET.ERROR)
                    END
                END
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
            END
    END CASE
    REPEAT
    IF RET.ERROR AND NOT(PROCESS.ERROR) THEN
        PROCESS.ERROR<-1> = RET.ERROR
        EB.SystemTables.setEtext(RET.ERROR)
        EB.ErrorProcessing.StoreEndError()
    END
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    IF REQD.PROCESS = "VAL" THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "BILL.REFERENCE.PICKED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = BILL.REFERENCE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.AMOUNT"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROPERTY.AMOUNT
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "EVENT.DATE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = EVENT.DATE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "CREDIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = CREDIT.BALANCE.TYPE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "DEBIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = DEBIT.BALANCE.TYPE
    END
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    IF PROCESS.ERROR THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ERROR DETECTED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROCESS.ERROR
    END
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    IF CHARGEOFF.DATE THEN
        PROCESS.TYPES = "BANK":@FM:"CUST"
    END
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    IF CURRENT.ACTIVITY EQ 'MAKEDUE.DISBURSE' THEN
        VALID.BILL.TYPES = 'DISBURSEMENT'
    END
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = "UNAUTH"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> EQ "DUE"
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = DUE.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = CUR.BALANCE.TYPE
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                ELSE
                    NOT(REQD.PROCESS EQ "VAL")
                    AA.Accounting.AccountingManager(REQD.PROCESS, "", "", "", "", RET.ERROR)
                END
            END
    END CASE
    REPEAT
    IF RET.ERROR AND NOT(PROCESS.ERROR) THEN
        PROCESS.ERROR<-1> = RET.ERROR
        EB.SystemTables.setEtext(RET.ERROR)
        EB.ErrorProcessing.StoreEndError()
    END
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    IF REQD.PROCESS = "VAL" THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "BILL.REFERENCE.PICKED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = BILL.REFERENCE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.AMOUNT"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROPERTY.AMOUNT
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "EVENT.DATE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = EVENT.DATE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "CREDIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = CREDIT.BALANCE.TYPE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "DEBIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = DEBIT.BALANCE.TYPE
    END
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    IF PROCESS.ERROR THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ERROR DETECTED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROCESS.ERROR
    END
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    IF CHARGEOFF.DATE THEN
        PROCESS.TYPES = "BANK":@FM:"CUST"
    END
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    IF CURRENT.ACTIVITY EQ 'MAKEDUE.DISBURSE' THEN
        VALID.BILL.TYPES = 'DISBURSEMENT'
    END
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = "UNAUTH"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> EQ "PAY"
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = CUR.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = PAY.BALANCE.TYPE
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                IF REQD.PROCESS EQ "VAL" THEN
                    IF MULTI.EVENT.REC THEN
                        AA.Accounting.AccountingManager(REQD.PROCESS, PROPERTY, ACTIVITY.ACTION, "", MULTI.EVENT.REC, RET.ERROR)
                    END
                END
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
            END
    END CASE
    REPEAT
    IF RET.ERROR AND NOT(PROCESS.ERROR) THEN
        PROCESS.ERROR<-1> = RET.ERROR
        EB.SystemTables.setEtext(RET.ERROR)
        EB.ErrorProcessing.StoreEndError()
    END
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    IF REQD.PROCESS = "VAL" THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "BILL.REFERENCE.PICKED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = BILL.REFERENCE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.AMOUNT"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROPERTY.AMOUNT
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "EVENT.DATE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = EVENT.DATE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "CREDIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = CREDIT.BALANCE.TYPE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "DEBIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = DEBIT.BALANCE.TYPE
    END
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    IF PROCESS.ERROR THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ERROR DETECTED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROCESS.ERROR
    END
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    IF CHARGEOFF.DATE THEN
        PROCESS.TYPES = "BANK":@FM:"CUST"
    END
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    IF CURRENT.ACTIVITY EQ 'MAKEDUE.DISBURSE' THEN
        VALID.BILL.TYPES = 'DISBURSEMENT'
    END
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = "UNAUTH"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> EQ "PAY"
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = CUR.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = PAY.BALANCE.TYPE
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                ELSE
                    NOT(REQD.PROCESS EQ "VAL")
                    AA.Accounting.AccountingManager(REQD.PROCESS, "", "", "", "", RET.ERROR)
                END
            END
    END CASE
    REPEAT
    IF RET.ERROR AND NOT(PROCESS.ERROR) THEN
        PROCESS.ERROR<-1> = RET.ERROR
        EB.SystemTables.setEtext(RET.ERROR)
        EB.ErrorProcessing.StoreEndError()
    END
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    IF REQD.PROCESS = "VAL" THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "BILL.REFERENCE.PICKED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = BILL.REFERENCE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.AMOUNT"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROPERTY.AMOUNT
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "EVENT.DATE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = EVENT.DATE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "CREDIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = CREDIT.BALANCE.TYPE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "DEBIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = DEBIT.BALANCE.TYPE
    END
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    IF PROCESS.ERROR THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ERROR DETECTED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROCESS.ERROR
    END
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    IF CHARGEOFF.DATE THEN
        PROCESS.TYPES = "BANK":@FM:"CUST"
    END
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    IF CURRENT.ACTIVITY EQ 'MAKEDUE.DISBURSE' THEN
        VALID.BILL.TYPES = 'DISBURSEMENT'
    END
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = "UNAUTH"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE 1
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                IF REQD.PROCESS EQ "VAL" THEN
                    IF MULTI.EVENT.REC THEN
                        AA.Accounting.AccountingManager(REQD.PROCESS, PROPERTY, ACTIVITY.ACTION, "", MULTI.EVENT.REC, RET.ERROR)
                    END
                END
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
            END
    END CASE
    REPEAT
    IF RET.ERROR AND NOT(PROCESS.ERROR) THEN
        PROCESS.ERROR<-1> = RET.ERROR
        EB.SystemTables.setEtext(RET.ERROR)
        EB.ErrorProcessing.StoreEndError()
    END
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    IF REQD.PROCESS = "VAL" THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "BILL.REFERENCE.PICKED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = BILL.REFERENCE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.AMOUNT"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROPERTY.AMOUNT
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "EVENT.DATE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = EVENT.DATE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "CREDIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = CREDIT.BALANCE.TYPE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "DEBIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = DEBIT.BALANCE.TYPE
    END
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    IF PROCESS.ERROR THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ERROR DETECTED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROCESS.ERROR
    END
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    IF CHARGEOFF.DATE THEN
        PROCESS.TYPES = "BANK":@FM:"CUST"
    END
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    IF CURRENT.ACTIVITY EQ 'MAKEDUE.DISBURSE' THEN
        VALID.BILL.TYPES = 'DISBURSEMENT'
    END
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = "UNAUTH"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE 1
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                ELSE
                    NOT(REQD.PROCESS EQ "VAL")
                    AA.Accounting.AccountingManager(REQD.PROCESS, "", "", "", "", RET.ERROR)
                END
            END
    END CASE
    REPEAT
    IF RET.ERROR AND NOT(PROCESS.ERROR) THEN
        PROCESS.ERROR<-1> = RET.ERROR
        EB.SystemTables.setEtext(RET.ERROR)
        EB.ErrorProcessing.StoreEndError()
    END
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    IF REQD.PROCESS = "VAL" THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "BILL.REFERENCE.PICKED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = BILL.REFERENCE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.AMOUNT"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROPERTY.AMOUNT
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "EVENT.DATE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = EVENT.DATE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "CREDIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = CREDIT.BALANCE.TYPE
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "DEBIT.BALANCE"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = DEBIT.BALANCE.TYPE
    END
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    IF PROCESS.ERROR THEN
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ERROR DETECTED"
        LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = PROCESS.ERROR
    END
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = 'REVERSE'
            REVERSAL.MODE = "YES"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE SYS.BILL.TYPE MATCHES "DISBURSEMENT":@VM:"TRANCHE"
                            PAY.METHOD = 'PAY'
                            ADDITIONAL.INFO = 'AVL'
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = AVL.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = ''
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                IF REQD.PROCESS EQ "VAL" THEN
                    IF MULTI.EVENT.REC THEN
                        AA.Accounting.AccountingManager(REQD.PROCESS, PROPERTY, ACTIVITY.ACTION, "", MULTI.EVENT.REC, RET.ERROR)
                    END
                END
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
            END
    END CASE
    REPEAT
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = 'REVERSE'
            REVERSAL.MODE = "YES"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE SYS.BILL.TYPE MATCHES "DISBURSEMENT":@VM:"TRANCHE"
                            PAY.METHOD = 'PAY'
                            ADDITIONAL.INFO = 'AVL'
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = AVL.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = ''
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                ELSE
                    NOT(REQD.PROCESS EQ "VAL")
                    AA.Accounting.AccountingManager(REQD.PROCESS, "", "", "", "", RET.ERROR)
                END
            END
    END CASE
    REPEAT
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = 'REVERSE'
            REVERSAL.MODE = "YES"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> EQ "DUE"
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = DUE.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = CUR.BALANCE.TYPE
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                IF REQD.PROCESS EQ "VAL" THEN
                    IF MULTI.EVENT.REC THEN
                        AA.Accounting.AccountingManager(REQD.PROCESS, PROPERTY, ACTIVITY.ACTION, "", MULTI.EVENT.REC, RET.ERROR)
                    END
                END
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
            END
    END CASE
    REPEAT
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = 'REVERSE'
            REVERSAL.MODE = "YES"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> EQ "DUE"
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = DUE.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = CUR.BALANCE.TYPE
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                ELSE
                    NOT(REQD.PROCESS EQ "VAL")
                    AA.Accounting.AccountingManager(REQD.PROCESS, "", "", "", "", RET.ERROR)
                END
            END
    END CASE
    REPEAT
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = 'REVERSE'
            REVERSAL.MODE = "YES"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> EQ "PAY"
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = CUR.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = PAY.BALANCE.TYPE
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                IF REQD.PROCESS EQ "VAL" THEN
                    IF MULTI.EVENT.REC THEN
                        AA.Accounting.AccountingManager(REQD.PROCESS, PROPERTY, ACTIVITY.ACTION, "", MULTI.EVENT.REC, RET.ERROR)
                    END
                END
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
            END
    END CASE
    REPEAT
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = 'REVERSE'
            REVERSAL.MODE = "YES"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> EQ "PAY"
                            EVENT.TYPE = ''
                            IF PART.ID EQ "BOOK" THEN
                                PART.ENTRY = ""
                            END
                            AA.Accounting.GetAccountingEventType("", "", "", ACTIVITY.ACTION, PAY.METHOD, ADDITIONAL.INFO, EVENT.TYPE , PART.ENTRY, RET.ERROR)
                            DR.EVENT.TYPE = EVENT.TYPE
                            DEBIT.BALANCE.TYPE = CUR.BALANCE.TYPE
                            CREDIT.BALANCE.TYPE = PAY.BALANCE.TYPE
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                ELSE
                    NOT(REQD.PROCESS EQ "VAL")
                    AA.Accounting.AccountingManager(REQD.PROCESS, "", "", "", "", RET.ERROR)
                END
            END
    END CASE
    REPEAT
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = 'REVERSE'
            REVERSAL.MODE = "YES"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE 1
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                IF REQD.PROCESS EQ "VAL" THEN
                    IF MULTI.EVENT.REC THEN
                        AA.Accounting.AccountingManager(REQD.PROCESS, PROPERTY, ACTIVITY.ACTION, "", MULTI.EVENT.REC, RET.ERROR)
                    END
                END
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
            END
    END CASE
    REPEAT
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
$PACKAGE AA.Account
    SUBROUTINE AA.ACCOUNT.MAKE.DUE.PARTICIPANT
    $USING AA.PaymentSchedule
    $USING AA.Framework
    $USING AA.ChargeOff
    $USING AA.ProductFramework
    $USING AA.Accounting
    $USING AC.SoftAccounting
    $USING EB.ErrorProcessing
    $USING EB.SystemTables
    $USING AF.Framework
    $USING AA.Participant
    R.ACTIVITY.STATUS = AF.Framework.getC_arractivitystatus()[AA.Framework.Sep,1,1]
    ARR.ACTIVITY.ID = AF.Framework.getC_arractivityid()
    R.ACTIVITY = AF.Framework.getC_arractivityrec()
    ACTIVITY.ACTION = AF.Framework.getCurrAction()
    EFFECTIVE.DATE = AF.Framework.getActivityEffDate()
    ARRANGEMENT.ID = AA.Framework.getArrId()
    CURRENT.ACTIVITY = AF.Framework.getActivityId()<AA.Framework.ActActivity>
    AAA.ID = AA.Framework.getTxnReference()
    AA.Participant.GetParticipantsCommon(PARTICIPANTS.LIST,PARTICIPANTS.ACCOUNTING.TYPE,"","",PARTICIPANTS.ENTRY.TYPE,PARTICIPANTS.LIST.ECB,"","","","","","",RET.ERROR)
    CHARGEOFF.DATE = ""
    AA.ChargeOff.GetChargeoffDetails(ARRANGEMENT.ID, "", CHARGEOFF.DATE, "", "")
    LOOP
    REMOVE SUB.TYPE FROM PROCESS.TYPES SETTING TYPE.POS
    WHILE SUB.TYPE
    REQD.PROCESS = ""
    RET.ERROR = ""
    PROCESS.ERROR = ""
    MULTI.EVENT.REC = ""
    REVERSAL.MODE = ""
    PROPERTY = AF.Framework.getPropertyId()
    PROPERTY.AMOUNT = ''
    PAYMENT.TYPE.LOC = ""
    RENEWAL.DATE = ""
    LAST.PAYMENT.DATE = ""
    EVENT.DATE = ""
    CREDIT.BALANCE.TYPE = ""
    DEBIT.BALANCE.TYPE  = ""
    ACTIVITY.ID = AF.Framework.getCurrActivity()
    PRODUCT.LINE = FIELD(ACTIVITY.ID, AA.Framework.Sep, 1)
    VALID.BILL.TYPES = ''
    BEGIN CASE
        CASE R.ACTIVITY.STATUS = 'REVERSE'
            REVERSAL.MODE = "YES"
            REQD.PROCESS = "VAL"
            BILL.REFERENCES = ""
            AA.PaymentSchedule.GetBill(ARRANGEMENT.ID, '', EFFECTIVE.DATE, "", "", "", "", "", "", "", "", "", BILL.REFERENCES, RET.ERROR)
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            PROPERTY.CLASS = "PAYMENT.SCHEDULE"
            AA.ProductFramework.GetPropertyRecord("", ARRANGEMENT.ID, "", EFFECTIVE.DATE, PROPERTY.CLASS, "", R.PAYMENT.SCHEDULE, RET.ERROR)
            LAST.PAYMENT.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdPaymentEndDate>
            RENEWAL.DATE = AA.Framework.getAccountDetails()<AA.PaymentSchedule.AccountDetails.AdRenewalDate>
            IF NOT(RENEWAL.DATE) AND EFFECTIVE.DATE EQ LAST.PAYMENT.DATE AND PRODUCT.LINE EQ "LENDING" AND NOT(CURRENT.ACTIVITY MATCHES 'MAKEDUE.DISBURSE':@VM:'TRANCHE.START') THEN
                THIS.ACTIVITY = "RESIDUAL"
                THIS.OBJECT = PROPERTY
                NEW.ACTIVITY.ID = PRODUCT.LINE:AA.Framework.Sep:THIS.ACTIVITY:AA.Framework.Sep:THIS.OBJECT
                AAA.REC = ""
                AAA.REC<AA.Framework.ArrangementActivity.ArrActArrangement> = ARRANGEMENT.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActActivity> = NEW.ACTIVITY.ID
                AAA.REC<AA.Framework.ArrangementActivity.ArrActEffectiveDate> = EFFECTIVE.DATE
                AAA.REC<AA.Framework.ArrangementActivity.ArrActCurrency> = AA.Framework.getRArrangement()<AA.Framework.Arrangement.ArrCurrency>
                AAA.REC<AA.Framework.ArrangementActivity.ArrActLinkedActivity> = ARR.ACTIVITY.ID
                AA.Framework.SecondaryActivityManager("APPEND.TO.LIST",AAA.REC)
            END
            LOOP
            REMOVE BILL.REFERENCE FROM BILL.REFERENCES SETTING BILL.REF.POS
            WHILE BILL.REFERENCE
            STORE.PARTICIPANT.BILLS = ""
            AA.PaymentSchedule.GetParticipantBill(ARRANGEMENT.ID, BILL.REFERENCE, STORE.PARTICIPANT.BILLS, RET.ERROR)
            LOOP
            REMOVE PART.BILL.ID FROM STORE.PARTICIPANT.BILLS SETTING SPOS
            WHILE PART.BILL.ID
            BILL.REFERENCE = PART.BILL.ID
            PART.ID = FIELD(PART.BILL.ID, "-", 2)
            PART.ACC.TYPE = ""
            PART.ECB = ""
            PART.ENTRY = ""
            LOCATE PART.ID IN PARTICIPANTS.LIST<1,1> SETTING POS THEN
                PART.ACC.TYPE = PARTICIPANTS.ACCOUNTING.TYPE<1,POS>
                PART.ECB = PARTICIPANTS.LIST.ECB<1,POS>
                PART.ENTRY = PARTICIPANTS.ENTRY.TYPE<1,POS>
            END
            BILL.DETAILS = ""
            IF BILL.REFERENCE THEN
                AA.PaymentSchedule.GetBillDetails(ARRANGEMENT.ID, BILL.REFERENCE, BILL.DETAILS, RET.ERROR)
                IF BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdDueReference> NE AAA.ID THEN
                    BILL.DETAILS = ""
                END
                IF SUB.TYPE EQ "CUST" AND BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> NE "DUE" THEN
                    BILL.DETAILS = ""
                END
            END
            IF RET.ERROR THEN
                PROCESS.ERROR<-1> = RET.ERROR
                EB.SystemTables.setEtext(RET.ERROR)
                EB.ErrorProcessing.StoreEndError()
            END
            SYS.BILL.TYPE = ''
            BILL.TYPE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdBillType,1>
            AA.PaymentSchedule.GetSysBillType(BILL.TYPE,SYS.BILL.TYPE,'')
            DUE.BALANCE.TYPE = ''
            LIFECYLE.STATUS = 'DUE'
            PROPERTY.ID = PROPERTY
            PROPERTY.ID<2> = PART.ACC.TYPE
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYLE.STATUS, "", SUB.TYPE, DUE.BALANCE.TYPE)
            CUR.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'CUR'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, CUR.BALANCE.TYPE)
            PAY.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'PAY'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, PAY.BALANCE.TYPE)
            EXP.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'EXP'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, EXP.BALANCE.TYPE)
            AVL.BALANCE.TYPE = ''
            LIFECYCLE.STATUS = 'AVL'
            AA.ProductFramework.PropertyGetBalanceName(ARRANGEMENT.ID, PROPERTY.ID, LIFECYCLE.STATUS, "", SUB.TYPE, AVL.BALANCE.TYPE)
            IF (BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdPaymentMethod,1> MATCHES "DUE":@VM:"PAY") AND (SYS.BILL.TYPE MATCHES VALID.BILL.TYPES) THEN
                PROCESS.TYPE = "DUE"
                AA.PaymentSchedule.GetBillPropertyAmount(PROCESS.TYPE, SUB.TYPE, PAYMENT.TYPE.LOC, PROPERTY, EFFECTIVE.DATE, BILL.DETAILS, PROPERTY.AMOUNT, "", RET.ERROR)
                IF RET.ERROR THEN
                    PROCESS.ERROR<-1> = RET.ERROR
                    EB.SystemTables.setEtext(RET.ERROR)
                    EB.ErrorProcessing.StoreEndError()
                END
                IF PROPERTY.AMOUNT AND NOT(PROCESS.ERROR) THEN
                    DR.EVENT.TYPE = ''
                    CR.EVENT.TYPE = ''
                    PAY.METHOD = ''
                    ADDITIONAL.INFO = ''
                    BEGIN CASE
                        CASE 1
                    END CASE
                    EVENT.REC = ""
                    EVENT.DATE = BILL.DETAILS<AA.PaymentSchedule.BillDetails.BdFinancialDate>
                END
            END
            REPEAT
            REPEAT
            IF MULTI.EVENT.REC AND NOT(RET.ERROR) THEN
                ELSE
                    NOT(REQD.PROCESS EQ "VAL")
                    AA.Accounting.AccountingManager(REQD.PROCESS, "", "", "", "", RET.ERROR)
                END
            END
    END CASE
    REPEAT
    LOG.INFO = ""
    LOG.INFO<AA.Framework.DebugLogDetails.DlRoutine> = "AA.ACCOUNT.MAKE.DUE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyName,-1> = "ACCOUNTING.PROCESS.TYPE"
    LOG.INFO<AA.Framework.DebugLogDetails.DlKeyValue,-1> = REQD.PROCESS
    CONVERT @FM TO "&FM&" IN PROCESS.ERROR
    AA.Framework.LogManager("UPDATE", "DEBUG", LOG.INFO, "")
RETURN

------------------------------------------------------------------------
